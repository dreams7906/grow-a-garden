-- üß† Ultimate Multi-Function Roblox Script by Jake ü•∑
task.wait(5)

-- === INIT SERVICES ===
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local VirtualUser = game:GetService("VirtualUser")
local player = Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")

-- === UNIVERSAL SETTINGS ===
local WEBHOOK_URL = "https://ptb.discord.com/api/webhooks/1376767236051570688/D90ex0UtKlZZ2uB2LMyJLXPWojzdvvPkHZlynS_U03N8M9_y_YHW5zjZtLCK6Cfo8LTK"

-- === MODULE: SKIPPER MENU ===
task.spawn(function()
    repeat task.wait() until game:IsLoaded()
    task.wait(5)
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
end)

-- === MODULE: ANTI-AFK ===
task.spawn(function()
    player.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Anti AFK loaded!",
        Text = "Made by Tuuguu936",
        Button1 = "Okay",
        Duration = 5
    })
end)

-- === MODULE: AUTO SELL PETS (With 30s Delay and Highlight Protection) ===
task.spawn(function()
    local highlighted = {
        ["Red Fox"] = true,
        ["Raccoon"] = true,
        ["Dragonfly"] = true
    }

    local validPets = {
        ["Black Bunny"] = true, ["Blood Hedgehog"] = true, ["Blood Kiwi"] = true,
        ["Blood Owl"] = true, ["Brown Mouse"] = true, ["Bunny"] = true,
        ["Cat"] = true, ["Caterpillar"] = true, ["Chicken"] = true,
        ["Chicken Zombie"] = true, ["Cow"] = true, ["Deer"] = true,
        ["Dog"] = true, ["Dragonfly"] = true, ["Echo Frog"] = true,
        ["Frog"] = true, ["Giant Ant"] = true, ["Golden Lab"] = true,
        ["Grey Mouse"] = true, ["Hedgehog"] = true, ["Kiwi"] = true,
        ["Mole"] = true, ["Monkey"] = true, ["Night Owl"] = true,
        ["Orange Tabby"] = true, ["Owl"] = true, ["Panda"] = true,
        ["Pig"] = true, ["Polar Bear"] = true, ["Praying Mantis"] = true,
        ["Raccoon"] = true, ["Red Fox"] = true, ["Red Giant Ant"] = true,
        ["Rooster"] = true, ["Sea Otter"] = true, ["Silver Monkey"] = true,
        ["Snail"] = true, ["Spotted Deer"] = true, ["Squirrel"] = true,
        ["Turtle"] = true
    }

    local function getBaseName(name)
        return name:match("^(.-)%s*%[") or name
    end

    local tracked = {}

    local function trySell(pet)
        local base = getBaseName(pet.Name)
        if validPets[base] and not highlighted[base] then
            pcall(function()
                ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("SellPet_RE"):FireServer(pet)
                print("‚úÖ Sold:", pet.Name)
            end)
        end
    end

    local function scheduleSell(pet)
        local id = tostring(pet)
        if not tracked[id] then
            tracked[id] = true
            task.delay(30, function()
                if pet.Parent == backpack then
                    trySell(pet)
                end
                tracked[id] = nil
            end)
        end
    end

    -- On pet added
    backpack.ChildAdded:Connect(function(pet)
        if not pet:IsA("Instance") then return end
        scheduleSell(pet)
    end)

    -- Check existing pets
    while true do
        local found = false
        for _, pet in ipairs(backpack:GetChildren()) do
            local base = getBaseName(pet.Name)
            if validPets[base] and not highlighted[base] then
                found = true
                scheduleSell(pet)
            end
        end
        if not found then
            print("üì≠ No pets to sell.")
        end
        task.wait(10)
    end
end)

-- === MODULE: WEBHOOK REPORTER (Clean Horizontal & Colored Highlights) ===
task.spawn(function()
    local validPets = {
        ["Black Bunny"] = true, ["Blood Hedgehog"] = true, ["Blood Kiwi"] = true,
        ["Blood Owl"] = true, ["Brown Mouse"] = true, ["Bunny"] = true,
        ["Cat"] = true, ["Caterpillar"] = true, ["Chicken"] = true,
        ["Chicken Zombie"] = true, ["Cow"] = true, ["Deer"] = true,
        ["Dog"] = true, ["Dragonfly"] = true, ["Echo Frog"] = true,
        ["Frog"] = true, ["Giant Ant"] = true, ["Golden Lab"] = true,
        ["Grey Mouse"] = true, ["Hedgehog"] = true, ["Kiwi"] = true,
        ["Mole"] = true, ["Monkey"] = true, ["Night Owl"] = true,
        ["Orange Tabby"] = true, ["Owl"] = true, ["Panda"] = true,
        ["Pig"] = true, ["Polar Bear"] = true, ["Praying Mantis"] = true,
        ["Raccoon"] = true, ["Red Fox"] = true, ["Red Giant Ant"] = true,
        ["Rooster"] = true, ["Sea Otter"] = true, ["Silver Monkey"] = true,
        ["Snail"] = true, ["Spotted Deer"] = true, ["Squirrel"] = true,
        ["Turtle"] = true
    }

    local validEggs = {
        ["Common Egg"] = true, ["Uncommon Egg"] = true, ["Rare Egg"] = true,
        ["Legendary Egg"] = true, ["Mythical Egg"] = true,
        ["Bug Egg"] = true, ["Night Egg"] = true
    }

    local highlightColors = {
        ["Red Fox"] = "üî¥",
        ["Raccoon"] = "üîµ",
        ["Dragonfly"] = "üü°"
    }

    local function parseItemName(name)
        local base, qty = name:match("^(.-)%s*[xX](%d+)$")
        return base and base or name, qty and tonumber(qty) or 1
    end

    local function collectCounts(filterSet)
        local counts = {}
        for _, item in ipairs(backpack:GetChildren()) do
            local raw = item.Name
            local base, qty = parseItemName(raw:match("^(.-)%s*%[") or raw)
            if filterSet[base] then
                counts[base] = (counts[base] or 0) + qty
            end
        end
        return counts
    end

    local function formatHorizontal(counts, useColors)
        local highlightedNames = { "Red Fox", "Raccoon", "Dragonfly" }
        local result = {}

        -- Add highlighted pets first, in order, bolded
        for _, name in ipairs(highlightedNames) do
            if counts[name] then
                table.insert(result, string.format("**%s x%d**", name, counts[name]))
            end
        end

        -- Add the rest, sorted, skipping highlighted
        local others = {}
        for name, qty in pairs(counts) do
            local isHighlighted = false
            for _, h in ipairs(highlightedNames) do
                if name == h then isHighlighted = true break end
            end
            if not isHighlighted then
                table.insert(others, string.format("%s x%d", name, qty))
            end
        end
        table.sort(others)
        for _, v in ipairs(others) do table.insert(result, v) end

        return #result > 0 and table.concat(result, " | ") or "None found."
    end

    local requestFunc = (syn and syn.request) or (http and http.request) or http_request or request

    while true do
        if #backpack:GetChildren() == 0 then
            print("üì≠ Skipping webhook: backpack is empty")
        else
            local pets = collectCounts(validPets)
            local eggs = collectCounts(validEggs)

            local embed = {
                ["embeds"] = { {
                    ["title"] = "üì¶ Pet Inventory Report",
                    ["fields"] = {
                        { ["name"] = "üë§ Username", ["value"] = "**" .. player.Name .. "**", ["inline"] = true },
                        { ["name"] = "üêæ Pet Summary", ["value"] = formatHorizontal(pets, true), ["inline"] = false },
                        { ["name"] = "ü•ö Egg Summary", ["value"] = formatHorizontal(eggs), ["inline"] = false }
                    },
                    ["color"] = 5793266,
                    ["footer"] = { ["text"] = "Updated on " .. os.date("%m/%d at %I:%M %p") }
                }}
            }

            if requestFunc then
                pcall(function()
                    requestFunc({
                        Url = WEBHOOK_URL,
                        Method = "POST",
                        Headers = { ["Content-Type"] = "application/json" },
                        Body = HttpService:JSONEncode(embed)
                    })
                end)
            else
                warn("‚ùå requestFunc is nil. Your executor may not support HTTP requests.")
            end
        end
        task.wait(300)
    end
end)

-- MODULE: AUTO PLACE EGGS (Enhanced Version)
task.spawn(function()
    local EGG_EVENT = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetEggService")
    local EGG_PRIORITY = {"Night Egg", "Bug Egg"} -- Only Night and Bug eggs
    local MAX_PLANTED = 3
    local CHECK_INTERVAL = 5

    local function getBaseName(name)
        return name:match("^(.-)%s*[xX]%d+") or name:match("^(.-)%s*%[") or name
    end

    local function hasEggInBackpack(targetName)
        local found = nil
        local quantity = 0
        
        for _, tool in ipairs(player.Backpack:GetChildren()) do
            local baseName = getBaseName(tool.Name)
            if baseName == targetName then
                found = tool
                local _, count = tool.Name:match("^(.-)%s*[xX](%d+)")
                quantity = tonumber(count) or 1
                break
            end
        end
        
        return found, quantity
    end

    local function forceUnequipAll()
        if player.Character then
            for _, tool in ipairs(player.Character:GetChildren()) do
                if tool:IsA("Tool") then
                    tool.Parent = backpack
                end
            end
        end
        task.wait(0.2)
    end

    local function tryEquipEgg(name)
        for attempt = 1, 3 do
            forceUnequipAll()
            local tool, qty = hasEggInBackpack(name)
            if tool then
                print("[EggPlacer] Found", tool.Name, "with quantity", qty)
                tool.Parent = player.Character
                task.wait(0.3)
                
                if player.Character and player.Character:FindFirstChild(tool.Name) then
                    print("[EggPlacer] Successfully equipped", tool.Name)
                    return true, qty
                end
            end
            task.wait(0.2)
        end
        return false, 0
    end

    local function waitForOwnedFarm(timeout)
        print("[EggPlacer] Looking for farm...")
        local start = tick()
        while tick() - start < (timeout or 30) do
            for _, farm in ipairs(Workspace.Farm:GetChildren()) do
                local ownerVal = farm:FindFirstChild("Important")
                    and farm.Important:FindFirstChild("Data")
                    and farm.Important.Data:FindFirstChild("Owner")
                if ownerVal and typeof(ownerVal.Value) == "string" and ownerVal.Value == player.Name then
                    print("[EggPlacer] Found farm!")
                    return farm
                end
            end
            task.wait(1)
        end
        return nil
    end

    local function getPlacedEggs(folder)
        local eggs = {}
        for _, obj in ipairs(folder:GetChildren()) do
            if obj.Name == "PetEgg" and obj:IsA("BasePart") then
                table.insert(eggs, obj)
            end
        end
        print("[EggPlacer] Found", #eggs, "placed eggs")
        return eggs
    end

    local function isPositionClear(pos, existing)
        for _, egg in ipairs(existing) do
            if (egg.Position - pos).Magnitude < 3.9 then return false end
        end
        return true
    end

    local function getRandomPoint(part)
        local size = part.Size
        local origin = part.Position
        return Vector3.new(
            origin.X + (math.random() - 0.5) * (size.X - 1),
            origin.Y + 0.1,
            origin.Z + (math.random() - 0.5) * (size.Z - 1)
        )
    end

    local function getOpenSpot(plantFolder, existingEggs)
        local candidates = {}
        for _, obj in ipairs(plantFolder:GetChildren()) do
            if obj:IsA("BasePart") and obj.Name == "Can_Plant" then
                table.insert(candidates, obj)
            end
        end
        
        for i = #candidates, 2, -1 do
            local j = math.random(i)
            candidates[i], candidates[j] = candidates[j], candidates[i]
        end

        for _, obj in ipairs(candidates) do
            for attempt = 1, 5 do
                local pos = getRandomPoint(obj)
                if isPositionClear(pos, existingEggs) then
                    print("[EggPlacer] Found clear position")
                    return pos
                end
            end
        end
        return nil
    end

    local function smartPlaceEggs(farm)
        local plantFolder = farm.Important:FindFirstChild("Plant_Locations")
        local objectsFolder = farm.Important:FindFirstChild("Objects_Physical")
        
        if not plantFolder or not objectsFolder then
            print("[EggPlacer] Missing required folders!")
            return
        end

        local currentEggs = getPlacedEggs(objectsFolder)
        local plantedCount = #currentEggs

        if plantedCount >= MAX_PLANTED then
            print("[EggPlacer] Max eggs already placed")
            forceUnequipAll()
            return
        end

        local slotsAvailable = MAX_PLANTED - plantedCount
        print("[EggPlacer] Slots available:", slotsAvailable)

        for _, eggName in ipairs(EGG_PRIORITY) do
            local success, quantity = tryEquipEgg(eggName)
            if success then
                print("[EggPlacer] Found", eggName, "x", quantity)
                
                local placed = 0
                while placed < slotsAvailable do
                    local pos = getOpenSpot(plantFolder, getPlacedEggs(objectsFolder))
                    if pos then
                        print("[EggPlacer] Placing", eggName)
                        EGG_EVENT:FireServer("CreateEgg", pos)
                        placed += 1
                        task.wait(1)
                        
                        if placed >= quantity then break end
                    else
                        print("[EggPlacer] No valid position found")
                        break
                    end
                end
                
                slotsAvailable -= placed
                if slotsAvailable <= 0 then break end
            end
        end
        
        forceUnequipAll()
    end

    local farm = waitForOwnedFarm(30)
    if not farm then 
        print("[EggPlacer] No farm found!")
        return 
    end

    print("[EggPlacer] Starting main loop...")
    while true do
        pcall(function()
            if not farm or not farm.Parent then
                print("[EggPlacer] Farm lost, reacquiring...")
                farm = waitForOwnedFarm(30)
                if not farm then return end
            end

            smartPlaceEggs(farm)
        end)
        
        task.wait(CHECK_INTERVAL)
    end
end)

-- MODULE: AUTO HATCH ALL EGGS (Always Hatch)
task.spawn(function()
    local HatchRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetEggService")

    local function hatchEgg(model)
        pcall(function()
            HatchRemote:FireServer("HatchPet", model)
        end)
    end

    -- Loop every 0.5s to hatch visible eggs
    task.spawn(function()
        while true do
            for _, mdl in ipairs(Workspace:GetDescendants()) do
                if mdl:IsA("Model") and mdl.Name == "PetEgg" then
                    hatchEgg(mdl)
                end
            end
            task.wait(0.5)
        end
    end)

    -- Hatch new eggs as they appear
    Workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("Model") and obj.Name == "PetEgg" then
            hatchEgg(obj)
        end
    end)
end)

-- MODULE: BUY EVENT SEEDS
task.spawn(function()
    local BuyRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyEventShopStock")
    local itemsToBuy = {"Night Seed Pack", "Night Egg"}
    while true do
        for _, item in ipairs(itemsToBuy) do
            BuyRemote:FireServer(item)
            task.wait(0.5)
        end
    end
end)

-- MODULE: BUY PET EGGS
task.spawn(function()
    local BuyPetEgg = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyPetEgg")
    while true do
        for eggId = 1, 5 do
            BuyPetEgg:FireServer(eggId)
            task.wait(0.5)
        end
    end
end)
